{"version":3,"sources":["components/AddCategory.js","helpers/getGif.js","components/GifGridItem.js","components/GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","reportWebVitals.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","values","Swal","fire","title","text","icon","confirmButtonText","type","value","onChange","target","getGif","category","a","url","encodeURI","fetch","resp","json","data","gif","map","img","id","images","downsized","GifGridItem","className","src","alt","GifGrid","state","loading","setState","useEffect","then","setTimeout","useFetchGifs","image","GifExpertApp","categories","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById"],"mappings":"4NAIaA,EAAc,SAAC,GAAyB,IAAtBC,EAAqB,EAArBA,cAAqB,EAEZC,mBAAS,IAFG,mBAEzCC,EAFyC,KAE7BC,EAF6B,KA6BhD,OACI,8BACI,uBAAMC,SAtBO,SAACC,GAClBA,EAAEC,iBACFH,EAAcD,EAAWK,QAEpBL,EAAWM,OAAS,GAAmB,MAAdN,GAE1BF,GAAe,SAAAS,GAAM,OAAMP,GAAN,mBAAqBO,OAC1CN,EAAc,KAEdO,IAAKC,KAAK,CACNC,MAAO,SACPC,KAAM,6BACNC,KAAM,QACNC,kBAAmB,UASvB,UACI,8CAEA,uBACIC,KAAK,OACLC,MAAUf,EACVgB,SAjCS,SAACb,GACtB,IAAMY,EAAQZ,EAAEc,OAAOF,MACvBd,EAAcc,Y,+BCVTG,EAAM,uCAAG,WAAOC,GAAP,uBAAAC,EAAA,6DACZC,EADY,iDACqCC,UAAUH,GAD/C,+DAGCI,MAAOF,GAHR,cAGZG,EAHY,gBAIKA,EAAKC,OAJV,uBAIVC,EAJU,EAIVA,KAEFC,EAAMD,EAAKE,KACb,SAAAC,GACI,MAAO,CACHC,GAAID,EAAIC,GACRpB,MAAOmB,EAAInB,MACXW,IAAKQ,EAAIE,OAAOC,UAAUX,QAXpB,kBAkBXM,GAlBW,4CAAH,sDCENM,EAAc,SAAC,GAAyB,EAAtBH,GAAuB,IAAnBpB,EAAkB,EAAlBA,MAAOW,EAAW,EAAXA,IAKtC,OACI,gCACI,qBAAKa,UAAU,6CAA6CC,IAAQd,EAAMe,IAAO1B,IACjF,4BAAKA,QCLJ2B,EAAU,SAAC,GAAoB,IAAjBlB,EAAgB,EAAhBA,SAIjBmB,ECNkB,SAAEnB,GAAe,IAAD,EAEdpB,mBAAS,CAC/B2B,KAAM,GACNa,SAAS,IAJ2B,mBAEjCD,EAFiC,KAE1BE,EAF0B,KAuBxC,OAhBDC,qBAAU,WACNvB,EAAQC,GACNuB,MACG,SAAAX,GACIY,YAAW,WACPH,EACI,CACId,KAAMK,EACNQ,SAAS,MAGlB,UAGb,CAAEpB,IAEGmB,EDjBQM,CAAczB,GAEhBY,EAAoBO,EAAzBZ,KAAaa,EAAYD,EAAZC,QAarB,OACI,eAAC,WAAD,WACI,mCAAOpB,EAAP,OACA,mCAAOoB,GAAW,8CAAlB,OACA,qBAAKL,UAAW,YAAhB,SAMYH,EAAOH,KAAK,SAAAiB,GAAK,OAAK,cAAC,EAAD,eAAqCA,GAAhBA,EAAMf,aE5B5DgB,EAAe,WAAO,IAAD,EAEI/C,mBAAU,CAAC,cAFf,mBAEzBgD,EAFyB,KAEbjD,EAFa,KAKhC,OACE,gCAEE,8CAEA,cAAC,EAAD,CAAaA,cAAkBA,IAC/B,uBAEA,6BAEIiD,EAAWnB,KAAK,SAAAT,GAAQ,OACtB,cAAC,EAAD,CAA4BA,SAAaA,GAAxBA,YCVd6B,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBR,MAAK,YAAkD,IAA/CS,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,O,MCCdO,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,SAM1BX,M","file":"static/js/main.e08249b3.chunk.js","sourcesContent":["import React, { useState } from 'react'\r\nimport Swal from 'sweetalert2';\r\nimport PropTypes from 'prop-types';\r\n\r\nexport const AddCategory = ( { setCategories } ) => {\r\n\r\n    const [inputValue, setInputValue] = useState('');\r\n\r\n    const handleInputValue = (e) => {\r\n        const value = e.target.value;\r\n        setInputValue(value); \r\n    }\r\n    \r\n    const handleSudmit = (e) => {\r\n        e.preventDefault();\r\n        setInputValue(inputValue.trim());\r\n\r\n        if ( inputValue.length > 1 && inputValue != null ) {\r\n            \r\n            setCategories( values => [ inputValue, ...values ] );\r\n            setInputValue('');\r\n        } else {\r\n            Swal.fire({\r\n                title: 'Error!',\r\n                text: 'Should add an input value!',\r\n                icon: 'error',\r\n                confirmButtonText: 'Cool'\r\n              })\r\n        }       \r\n    }\r\n\r\n\r\n\r\n    return (\r\n        <div>\r\n            <form onSubmit = { handleSudmit }>\r\n                <h2>Add Category</h2>\r\n\r\n                <input \r\n                    type=\"text\" \r\n                    value = { inputValue }\r\n                    onChange = { handleInputValue }\r\n                    />\r\n           </form> \r\n        </div>\r\n    )\r\n}\r\n\r\nAddCategory.propTypes  = {\r\n    setCategories: PropTypes.func.isRequired  \r\n}\r\n","export const getGif = async( category ) => {\r\n    const url = `https://api.giphy.com/v1/gifs/search?q=${ encodeURI(category) }&limit=10&api_key=bffCoegNBvR0XH0bToxKIc5G1OR4Pqgn`;\r\n    \r\n    const resp = await fetch( url );\r\n    const { data } = await resp.json();\r\n\r\n    const gif = data.map(\r\n        img => {\r\n            return {\r\n                id: img.id,\r\n                title: img.title,\r\n                url: img.images.downsized.url\r\n            }\r\n        }\r\n    ); \r\n    \r\n    // console.log(gif);\r\n    // setImages(gif);\r\n    return gif;\r\n}","import React from 'react'\r\n\r\nexport const GifGridItem = ( { id, title, url } ) => {\r\n\r\n    // console.log( props.img );\r\n\r\n\r\n    return (\r\n        <div>\r\n            <img className=\"card animate__animated animate__fadeInDown\" src = { url } alt= { title } />\r\n            <p>{ title }</p>            \r\n        </div>\r\n    )\r\n}\r\n","import React, { Fragment }  from 'react'\r\nimport { useFetchGifs } from '../hooks/useFetchGifs';\r\nimport { GifGridItem } from './GifGridItem';\r\n// import { getGif } from '../helpers/getGif';\r\n\r\nexport const GifGrid = ( { category } ) => {\r\n\r\n    // const [images, setImages] = useState([]);\r\n\r\n    const state  = useFetchGifs( category );\r\n    // console.log(state);\r\n    const { data:images, loading } = state;\r\n\r\n    // useEffect( () => {\r\n    //     getGif( category ).then (\r\n    //         images => setImages(images)\r\n    //     )\r\n    // },[category]);\r\n\r\n    \r\n\r\n    // getGif();\r\n\r\n\r\n    return (\r\n        <Fragment>\r\n            <h3> { category } </h3>\r\n            <h1> { loading && <p> Cargando... </p>} </h1>\r\n            <div className= \"card-grid\">\r\n                \r\n\r\n                \r\n                    {\r\n                       \r\n                        images.map( image  => <GifGridItem key = { image.id } { ...image } />)\r\n                    }\r\n                \r\n                \r\n            </div>\r\n        </Fragment>\r\n    )\r\n}\r\n","import { useState, useEffect } from 'react';\r\nimport { getGif } from '../helpers/getGif';\r\n\r\nexport const useFetchGifs = ( category ) => {\r\n    \r\n    const [state, setState] = useState({\r\n        data: [],\r\n        loading: true\r\n    });\r\n\r\n   useEffect(() => {\r\n       getGif( category )\r\n        .then(\r\n            images => {\r\n                setTimeout(() => {\r\n                    setState(\r\n                        {\r\n                            data: images,\r\n                            loading: false\r\n                        }\r\n                    );\r\n                }, 3000);\r\n            }        \r\n            )\r\n   }, [ category ]);\r\n\r\n    return state;\r\n}\r\n","import React, { useState }  from \"react\";\r\nimport { AddCategory } from \"./components/AddCategory\";\r\nimport { GifGrid } from \"./components/GifGrid\";\r\n\r\n\r\n\r\nexport const GifExpertApp = () => { \r\n  \r\n  const [categories, setCategories] = useState( ['One punch'] );\r\n  \r\n\r\n  return (\r\n    <div>\r\n\r\n      <h2>GifExpertApp</h2>\r\n\r\n      <AddCategory setCategories = { setCategories } />\r\n      <hr />  \r\n\r\n      <ol>\r\n        {\r\n          categories.map( category  => (           \r\n            <GifGrid key = { category } category = { category } />\r\n          ))\r\n        }\r\n      </ol>\r\n    </div>\r\n  );\r\n};\r\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport { GifExpertApp } from './GifExpertApp';\n// import App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport 'animate.css';\n\nReactDOM.render(\n  <GifExpertApp />,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}